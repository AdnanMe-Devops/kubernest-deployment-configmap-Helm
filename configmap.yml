ngnix.configmap.yml

apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: cloudacademy
data:
  nginx.conf: |-
    #CODE1.0:
    #add the nginx.conf configuration - this will be referenced within the deployment.yaml
    server {
        listen 80;
        server_name localhost;

        location / {
            proxy_pass http://localhost:5000/;
            proxy_set_header Host "localhost";
        }
    }


--
Edit and update the nginx.configmap.yaml manifest file by adding the following directly beneath the #Code1.0 comment block:


#CODE1.0:
#add the nginx.conf configuration - this will be referenced within the deployment.yaml
server {
 listen 80;
 server_name localhost;

 location / {
   proxy_pass http://localhost:5000/;
   proxy_set_header Host "localhost";
 }
}
This provides the configuration that the NGINX web server will use at runtime. The configuration is stored within a ConfigMap cluster resource and is mounted into the container when the container is launched.

Apply the updated nginx.configmap.yaml file into the K8s cluster - this will create a new ConfigMap resource. In the terminal execute the following command:

--------------
value.yml
# Default values for app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  tag: stable
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

#CODE3.0:
#create new configuration value which will store a message to be passed into the Flask web app as an environment variable
webapp:
    message: CloudAcademy.DevOps.K8s.Helm
